#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<time.h>

struct Transaction
{
	char username[100];
	time_t timestamp;//时间戳 
	int type;//0-取款，1-存款,2-转账 
	float amount;
	struct Transaction * next;
};
typedef struct Transaction Transaction;

//交易记录信息链表 
Transaction * tHead=NULL;
Transaction * tTail=NULL;
Transaction * curTransaction=NULL;

struct Account
{
	char name[100];
	char password[7];
	char username[19];
	char idCard[19];
	char tel[12];
	float money;
	struct Account* next;
};
typedef struct Account Account;
int language;//1-中文,2-English
Account* head=NULL;//指向头结点的指针
Account* tail=NULL;//指向尾结点的指针
Account *curAccount=NULL;//记录当前账户
Account * otherAccount=NULL;//记录对方账户  
int findAccount(Account a)
{
	Account *curp=head;
	while(curp!=NULL)
	{
		if((strcmp(curp->username,a.username)==0)&&(strcmp(curp->password,a.password)==0))
		{
			curAccount=curp;
			return 1; 
		}
		curp=curp->next;
	}
	return 0;
}

void saveTransaction()
{
	FILE* fp=fopen("D:/transation_record.txt","w");
	Transaction* curP=tHead;
	time_t timestamp;
	struct tm* p;
	time(&timestamp);
	p=gmtime(&timestamp);
	while(curP!=NULL)
	{
		fprintf(fp,"%s\t%d-%d-%d %d:%d:%d\t\t%d\t%f\n",curP->username,1900+p->tm_year,1+p->tm_mon,p->tm_mday,8+p->tm_hour,p->tm_min,p->tm_sec,curP->type,curP->amount);
		curP=curP->next;
	}
	fclose(fp);
}

void drawMoney()
{
	if(language==1)
	{
		printf("\t\t\t\t\t请输入你要取出的金额：");
	    int money;
	    scanf("%d",&money);
	    //验证金额
	    if(curAccount->money>=money)
	    {
		    printf("\t\t\t\t\t恭喜你，取款成功！\n");
		    curAccount->money-=money;
		
		    //创建结点
		    Transaction * newNode=(Transaction*)malloc(sizeof(Transaction)); 
		
		    //结点初始化
		    newNode->next=NULL;
		    strcpy(newNode->username,curAccount->username);
		    newNode->timestamp=time(NULL);
		    newNode->type=0;
		    newNode->amount=money;
		
	    	//添加结点到链表
		    if(tHead==NULL)
		    {
			    tHead=newNode;
			    tTail=newNode;
		    }
		    else
		    {
			    tTail->next=newNode;
			    tTail=newNode;
		    }
	    } 
	    else
	    {
		    printf("\t\t\t\t\t抱歉，您的余额不足！\n");
	    }
	    saveTransaction();
	}
	else if(language==2)
	{
		printf("\t\t\t\t\tenter your draw money：");
	    int money;
	    scanf("%d",&money);
	
	    //验证金额
	    if(curAccount->money>=money)
	    {
		    printf("\t\t\t\t\twithdrawal succeeded！\n");
		    curAccount->money-=money;	
		
		    //创建结点
		    Transaction * newNode=(Transaction*)malloc(sizeof(Transaction)); 
		
		    //结点初始化
		    newNode->next=NULL;
		    strcpy(newNode->username,curAccount->username);
		    newNode->timestamp=time(NULL);
		    newNode->type=0;
		    newNode->amount=money;
		
		    //添加结点到链表
		    if(tHead==NULL)
		    {
			    tHead=newNode;
			    tTail=newNode;
		    }
		    else
		    {
			    tTail->next=newNode;
			    tTail=newNode;
		    }
	    } 
	    else
	    {
		    printf("\t\t\t\t\tsorry,your credit is running low！\n");
	    }
	    saveTransaction();
	}
}

void saveMoney()
{
	if(language==1)
	{
		printf("\t\t\t\t\t请输入存款金额：");
	    int money;
	    scanf("%d",&money);
	    printf("\t\t\t\t\t恭喜你，存款成功！\n");
	    curAccount->money+=money;
	    //创建结点
		Transaction * newNode=(Transaction*)malloc(sizeof(Transaction)); 
	
	    //结点初始化
		newNode->next=NULL;
		strcpy(newNode->username,curAccount->username);
	    newNode->timestamp=time(NULL);
	    newNode->type=1;
	    newNode->amount=money;
		
    	//添加结点到链表
	    if(tHead==NULL)
	    {
		    tHead=newNode;
		    tTail=newNode;
	    }
	    else
	    {
		    tTail->next=newNode;
		    tTail=newNode;
	    }
	    saveTransaction();
	}
	else if(language==2)
	{
		printf("\t\t\t\t\tenter your save money：");
	    int money;
	    scanf("%d",&money);
	    printf("\t\t\t\t\tdeposit succeeded！\n");
	    curAccount->money+=money;
	    //创建结点
	    Transaction * newNode=(Transaction*)malloc(sizeof(Transaction)); 
		
	    //结点初始化
	    newNode->next=NULL;
	    strcpy(newNode->username,curAccount->username);
	    newNode->timestamp=time(NULL);
	    newNode->type=1;
	    newNode->amount=money;
		
	   	//添加结点到链表
	    if(tHead==NULL)
	    {
		    tHead=newNode;
		    tTail=newNode;
	    }
	    else
	    {
		    tTail->next=newNode;
		    tTail=newNode;
	    }    
	    saveTransaction();
	}
}

void updataPassword()//修改密码 
{
	if(language==1)
	{
		printf("\t\t\t\t\t请输入您的旧密码:");
	    char oldpassword[100];
	    scanf("%s",oldpassword);
	    if(strcmp(oldpassword,curAccount->password)==0)
	    {
		    printf("\t\t\t\t\t请输入您的新密码:");
		    scanf("%s",curAccount->password);
		    if(strcmp(curAccount->password,oldpassword)==0)
		    {
			    for(int i=0;i<3;i++)
			    {
				    printf("\t\t\t\t\t您的新密码与旧密码相同，要重新输入:");
			        scanf("%s",curAccount->password);
			        if(strcmp(curAccount->password,oldpassword)!=0)
			        {
			    	    printf("\t\t\t\t\t修改成功!\n");
			    	    break;
				    }
			    }
		    }
		    else
		    {
			    printf("\t\t\t\t\t修改成功!\n");
		    }
	    }
	    else
	    {
		    printf("\t\t\t\t\t密码错误，不能修改!\n");
	    }
	}
	else if(language==2)
	{
		printf("\t\t\t\t\tenter your old code:");
	    char oldpassword[100];
	    scanf("%s",oldpassword);
	    if(strcmp(oldpassword,curAccount->password)==0)
	    {
		    printf("\t\t\t\t\tenter your new code:");
		    scanf("%s",curAccount->password);
		    if(strcmp(curAccount->password,oldpassword)==0)
		    {
			    for(int i=0;i<3;i++)
			    {
				    printf("\t\t\t\t\tthe new code is the same as the old code,re-enter:");
			        scanf("%s",curAccount->password);
			        if(strcmp(curAccount->password,oldpassword)!=0)
			        {
			    	    printf("\t\t\t\t\tmodified successfully!\n");
			    	    break;
				    }
			    }
		    }
		    else
		    {
			    printf("\t\t\t\t\tmodified successfully!\n");
		    }
	    }
	    else
	    {
		    printf("\t\t\t\t\tthe code is incorrect and cannot be modified!\n");
	    }
	}
}
 
void signIn()//登录
{
	if(language==1)
	{
		for(int i=0;i<3;i++)
	    {
		    Account a;
		    printf("\t\t\t\t\t请输入账号:");
		    scanf("%s",a.username);
		    printf("\t\t\t\t\t请输入密码:");
		    scanf("%s",a.password);
		    if(findAccount(a))
		    {
		    	printf("\t\t\t\t\t登陆成功!\n");
			    return;
		    }
		    else
		    {
			    printf("\t\t\t\t\t登陆失败!\n");
		    }
	    }
	}
	else if(language==2)
	{
		for(int i=0;i<3;i++)
	    {
		    Account a;
		    printf("\t\t\t\t\tenter your username:");
		    scanf("%s",a.username);
		    printf("\t\t\t\t\tenter your code:");
		    scanf("%s",a.password);
		    if(findAccount(a))
		    {
		    	printf("\t\t\t\t\tlogin successful!\n");
			    break;
		    }
		    else
		    {
			    printf("\t\t\t\t\tlogin failed!\n");
		    }
	    }
	}
}

void signUp()//注册
{
	//申请一块堆内存空间，将其地址赋值给指针newNode(创建节点）
	Account* newNode=(Account*)malloc(sizeof(Account));
	//结点赋值
	if(language==1)
	{
	    printf("\t\t\t\t\t请输入姓名:\n");
	    printf("\t\t\t\t\t");
	    scanf("%s",newNode->name);
	    printf("\t\t\t\t\t请输入账号:\n");
	    printf("\t\t\t\t\t");
	    scanf("%s",newNode->username);
	    printf("\t\t\t\t\t请输入密码:\n");
	    printf("\t\t\t\t\t");
	    scanf("%s",newNode->password);
	    printf("\t\t\t\t\t请输入身份证:\n");
	    printf("\t\t\t\t\t");
	    scanf("%s",newNode->idCard); 
	    printf("\t\t\t\t\t请输入电话:\n");
	    printf("\t\t\t\t\t");
	    scanf("%s",newNode->tel);
    }
	else if(language==2)
	{
		printf("\t\t\t\t\tenter your name:\n");
		printf("\t\t\t\t\t");
	    scanf("%s",newNode->name);
	    printf("\t\t\t\t\tenter your account:\n");
	    printf("\t\t\t\t\t");
	    scanf("%s",newNode->username);
	    printf("\t\t\t\t\tenter your code:\n");
	    printf("\t\t\t\t\t");
	    scanf("%s",newNode->password);
	    printf("\t\t\t\t\tenter your idcard:\n");
	    printf("\t\t\t\t\t");
	    scanf("%s",newNode->idCard); 
	    printf("\t\t\t\t\tenter your tel:\n");
	    printf("\t\t\t\t\t");
	    scanf("%s",newNode->tel);
	}
	newNode->money=0.0f;
	newNode->next=NULL;
	//添加结点到链表
	if(head==NULL)
	{
		head=newNode;
		tail=newNode;
	}
	else
	{
		tail->next=newNode;
		tail=newNode;
	}
	printf("\t\t\t\t\t用户注册成功\n");
} 

//根据卡号查找对方账户，找到返回1，找不到返回0 
int findOtherAccount(char otherUsername[])
{
	Account * curp=head;
	while(curp!=NULL)
	{
		if(strcmp(curp->username,otherUsername)==0)	
		{
			otherAccount = curp; 
			return 1;
		}
		curp=curp->next;
	} 
	return 0;
}

void transfer()
{
	if(language==1)
	{
		int money;
	    char otherUsername[100];
	    char ownusername[100];
	    printf("\t\t\t\t\t请输入您自己的账户：");
	    scanf("%s",ownusername); 
	    printf("\t\t\t\t\t请输入对方账户：");
	    scanf("%s",otherUsername);
	
	    //判断账户合法性
	    if(findOtherAccount(otherUsername))
	    {
	    	if(strcmp(otherUsername,ownusername)!=0)
	    	{
	    		printf("\t\t\t\t\t请输入转账金额：");
		        scanf("%d",&money);
		
		        //判断金额的合法性
		        if(curAccount->money>=money)
		        {
			        //转账（当前账户余额减少，对方账户余额增多）
			        curAccount->money -= money;
			        otherAccount->money += money;
			        printf("\t\t\t\t\t转账成功!\n");
		        }
		        else
		        {
			        printf("\t\t\t\t\t余额不足！\n");
	            }
			}
			else
			{
				printf("\t\t\t\t\t不能向自己的账户转账哦!!!\n");
			}
		    
	    }
    	else
	    {
		    printf("\t\t\t\t\t账户不存在\n");
	    }
	    //创建结点
		Transaction * newNode=(Transaction*)malloc(sizeof(Transaction)); 
		
	    //结点初始化
	    newNode->next=NULL;
	    strcpy(newNode->username,curAccount->username);
	    newNode->timestamp=time(NULL);
	    newNode->type=2;
	    newNode->amount=money;
		
	   	//添加结点到链表
	    if(tHead==NULL)
	    {
		    tHead=newNode;
		    tTail=newNode;
	    }
	    else
	    {
		    tTail->next=newNode;
		    tTail=newNode;
		}
	    saveTransaction(); 
	}
	else if(language==2)
	{
		
		int money;
	    char otherUsername[100];
	    char ownusername[100];
	    printf("\t\t\t\t\tenter your own account");
	    scanf("%s",ownusername);
	    printf("\t\t\t\t\tenter opposite account：");
	    scanf("%s",otherUsername);
	
	    //判断账户合法性
	    if(findOtherAccount(otherUsername))
	    {
	    	if(strcmp(otherUsername,ownusername)!=0)
	    	{
	    		printf("\t\t\t\t\tenter transfer amount：");
		        scanf("%d",&money);
		
	     	    //判断金额的合法性
		        if(curAccount->money>=money)
		        {
			        //转账（当前账户余额减少，对方账户余额增多）
			        curAccount->money -= money;
			        otherAccount->money += money;
			        printf("\t\t\t\t\ttransfer succeeded!\n");
		        }
		        else
		        {
			        printf("\t\t\t\t\tsorry,your credit is running low！\n");
	            }
			}
			else
			{
				printf("\t\t\t\t\tYou can't transfer money to your own account\n");
			}
	    }
    	else
	    {
		    printf("\t\t\t\t\taccount dose not exist\n");
	    }
	    //创建结点
		Transaction * newNode=(Transaction*)malloc(sizeof(Transaction)); 
		
	    //结点初始化
	    newNode->next=NULL;
	    strcpy(newNode->username,curAccount->username);
	    newNode->timestamp=time(NULL);
	    newNode->type=2;
	    newNode->amount=money;
		
	   	//添加结点到链表
	    if(tHead==NULL)
	    {
		    tHead=newNode;
		    tTail=newNode;
	    }
	    else
	    {
		    tTail->next=newNode;
		    tTail=newNode;
	    }
	    saveTransaction();
	}
}

void display()//查询账户信息 
{
	if(language==1)
	{
		FILE *fp=fopen("D:/atm.txt","r");
	    Account* curP=head;
	    char zh[9];
	    printf("\t\t\t\t\t请输入你的银行账号：");
	    scanf("%s",&zh);
	    if(strcmp(zh,curAccount->username)==0)
	    {
		    while(curP!=NULL)
		    {
		    	printf("\t\t\t\t\t您的账户余额如下：");
			    printf("%lf\n",curAccount->money);
			    curP=curP->next;
			    break;
		    }
	    }
        else
        {
       	    printf("\t\t\t\t\t此账户不存在，无法查询余额！！！\n");
	    }
        fclose(fp);	
	}
	else if(language==2)
	{
		FILE *fp=fopen("D:/atm.txt","r");
	    Account* curP=head;
	    char zh[9];
	    printf("\t\t\t\t\tenter your username:");
	    scanf("%s",&zh);

	    if(strcmp(zh,curAccount->username)==0)
	    {
		    while(curP!=NULL)
		    {
		    	printf("\t\t\t\t\tyour balance is as follows：");
			    printf("%lf\n",curAccount->money);
			    curP=curP->next;
			    break;
		    }
	    }
        else
        {
       	    printf("\t\t\t\t\tthe user dose not exist！！！\n");
	    }
        fclose(fp);	
	}
}

void showMenu()
{
	while(1)
	{
		if(language==1)
		{
			system("cls");
			printf("\t\t\t\t\t**********************************\n"); 
			printf("\t\t\t\t\t**********************************\n"); 
			printf("\t\t\t\t\t**\t登录，请按1\t\t**\n");
			printf("\t\t\t\t\t**\t开户，请按2\t\t**\n");
			printf("\t\t\t\t\t**\t修改密码，请按3\t\t**\n");
			printf("\t\t\t\t\t**\t取款，请按4\t\t**\n");
			printf("\t\t\t\t\t**\t存款，请按5\t\t**\n");
			printf("\t\t\t\t\t**\t转账，请按6\t\t**\n");
			printf("\t\t\t\t\t**\t查询，请按7\t\t**\n");
			printf("\t\t\t\t\t**\t退出，请按8\t\t**\n");
			printf("\t\t\t\t\t**********************************\n"); 
			printf("\t\t\t\t\t**********************************\n"); 
		}
		else if(language==2)
		{
			system("cls");
			printf("\t\t\t\t\t******************************************\n"); 
			printf("\t\t\t\t\t******************************************\n");
			printf("\t\t\t\t\t**\tsign in,press 1\t\t\t**\n");
			printf("\t\t\t\t\t**\tsign up,press 2\t\t\t**\n");
			printf("\t\t\t\t\t**\tchange password,press 3\t\t**\n");
			printf("\t\t\t\t\t**\tdraw money,press 4\t\t**\n");
			printf("\t\t\t\t\t**\tsave money,press 5\t\t**\n");
			printf("\t\t\t\t\t**\ttransfer accounts,press 6\t**\n");
			printf("\t\t\t\t\t**\tfind,press 7\t\t\t**\n");
			printf("\t\t\t\t\t**\tsign out,press 8\t\t**\n");
			printf("\t\t\t\t\t******************************************\n"); 
			printf("\t\t\t\t\t******************************************\n");
		}
		int n;
		printf("\t\t\t\t\t");
		scanf("%d",&n);
		if(n==1)
		{
			system("cls");
		 	signIn();
		 	printf("\t\t\t\t\t");
		 	system("pause");
		}
		else if(n==2)
	    {
	    	system("cls");
			signUp();
			printf("\t\t\t\t\t");
			system("pause");
		}
		else if(n==3)
		{
			system("cls");
			updataPassword();
			printf("\t\t\t\t\t");
			system("pause"); 
		}
		else if(n==4)
		{
			system("cls");
			drawMoney();
			printf("\t\t\t\t\t");
			system("pause");
		}
		else if(n==5)
		{
			system("cls");
			saveMoney();
			printf("\t\t\t\t\t");
			system("pause");
		}
		else if(n==6)
		{
			system("cls");
			transfer();
			printf("\t\t\t\t\t");
			system("pause");
		} 
		else if(n==7)
		{
			system("cls");
			display();
			printf("\t\t\t\t\t");
			system("pause");
		} 
		else if(n==8)
		{
			system("cls");
		 	return;
		 	printf("\t\t\t\t\t");
		 	system("pause");
		}
		
	}
}

void loadData()
{
	FILE* fp=fopen("D:/atm.txt","r"); 
	if(fp!=NULL)
	{
		while(!feof(fp))
		{
			//创建结点
			Account *newNode=(Account *)malloc(sizeof(Account));
			
			//结点初始化
			newNode->next=NULL;
			fscanf(fp,"%s\t%s\t%s\t%s\t%s\t%f\n",newNode->name,newNode->username,newNode->password,newNode->idCard,newNode->tel,&newNode->money);
			
			//添加结点到链表 
			if(head==NULL)
			{
				head=newNode;
				tail=newNode;
			}
			else
			{
				tail->next=newNode;
				tail=newNode;
			}
		}
		fclose(fp); 
	}
}

void saveData()
{
	FILE* fp=fopen("D:/atm.txt","w");
	if(fp!=NULL)
	{
		Account* curP=head;
	    while(curP!=NULL)
	    {
		    fprintf(fp,"%s\t%s\t%s\t%s\t%s\t%f\n",curP->name,curP->username,curP->password,curP->idCard,curP->tel,curP->money);
		    curP=curP->next;
	    }
	    fclose(fp);
	}
}

int main()
{
	loadData();//加载账户信息 
	printf("\t\t\t\t\t\t*************************\n");
	printf("\t\t\t\t\t\t*************************\n");
	printf("\t\t\t\t\t\t**\t欢迎来到ATM\t*\n");
	printf("\t\t\t\t\t\t*************************\n");
	printf("\t\t\t\t\t\t*************************\n");
	printf("\n\n\n");
	printf("\t\t\t\t\t\t中文服务，请按1\n");
	printf("\t\t\t\t\t\tEnglish Service,press 2\n");
	printf("\t\t\t\t\t\t");
	scanf("%d",&language);
	showMenu();
	saveTransaction();
	saveData();
	return 0;
}
 
